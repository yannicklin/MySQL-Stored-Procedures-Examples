BEGIN
 DECLARE PS_DBNAME VARCHAR(50);
 DECLARE batch INT;
 DECLARE batch_size INT;
 DECLARE start_point INT;
 DECLARE DBTABLE_SUFFIX VARCHAR(50);
 DECLARE PRODUCT_PREFIX VARCHAR(50);
 
 SET sql_mode = 'ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
 
 SET batch = 200;
 SET batch_size = 50;
 SET start_point = 0;
 
 SET SERVER_TARGET = IFNULL(SERVER_TARGET, 'au-lego');
 IF ((SUBSTRING(SERVER_TARGET, 3, 1) = '-')  AND (SUBSTRING(SERVER_TARGET, 1, 2) = 'target')) THEN
	SET PS_DBNAME = CONCAT('SampleCompany', '_', SERVER_TARGET, '`.`', 'tableprex', '_');
	SET DBTABLE_SUFFIX = CONCAT('_', SERVER_TARGET);
	SET PRODUCT_PREFIX = '';
 ELSEIF ((SUBSTRING(SERVER_TARGET, 3, 1) = '-')  AND (SUBSTRING(SERVER_TARGET, 1, 2) = 'targetnz')) THEN	
	SET PS_DBNAME = CONCAT('SampleCompany', '_', SERVER_TARGET, '`.`', 'tableprexnz', '_');
	SET DBTABLE_SUFFIX = CONCAT('_', SERVER_TARGET);
	SET PRODUCT_PREFIX = 'NZ-';
 ELSEIF SUBSTRING(SERVER_TARGET, 1, 2) = 'target' THEN
	SET PS_DBNAME = CONCAT('SampleCompany', '_', SERVER_TARGET, '`.`', 'tableprex', '_');
	SET DBTABLE_SUFFIX = CONCAT('_', SERVER_TARGET);
	SET PRODUCT_PREFIX = '';
 ELSEIF SUBSTRING(SERVER_TARGET, 1, 2) = 'targetnz' THEN
	SET PS_DBNAME = CONCAT('SampleCompany', '_', SERVER_TARGET, '`.`', 'tableprexnz', '_');
	SET DBTABLE_SUFFIX = CONCAT('_', SERVER_TARGET);
	SET PRODUCT_PREFIX = 'NZ-';
 ELSE
	SET PS_DBNAME = CONCAT('SampleCompany', '_', SERVER_TARGET, '`.`', 'tableprex', '_');
	SET DBTABLE_SUFFIX = '_au-lego';
	SET PRODUCT_PREFIX = '';
 END IF;  
 
 
SELECT 'This procedure is to incrementally append the matrix of product and hourly new created account/company, with the price based on the Price Tier and Debtor Price Rule.';
SELECT 'All data are come from SalesForce without modifications.';
SELECT 
    CONCAT('Now it starts: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' ! ', 'Target: ', SERVER_TARGET);

				
/* RECREATE Company/ACCOUNT TABLE */
CALL `SP_Exec_Qry`(CONCAT("DROP TEMPORARY TABLE IF EXISTS `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "`"));

IF SUBSTRING(DBTABLE_SUFFIX, 2, 2) = 'target' THEN
	CALL `SP_Exec_Qry`(CONCAT("CREATE TEMPORARY TABLE `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "` ENGINE=MEMORY AS (SELECT
		`ID` AS `ACCOUNT_ID`,
		`NAME` AS `ACCOUNT`,
		`tab_prex_SELLING_PRICE_SCHEME__C` FROM
		`tab_prex_sf_account` WHERE `tab_prex_ACTIVE__C` = 1 AND UPPER(`tab_prex_DATABASE__C`) = UPPER('Flamestop7') AND `ID` IN (SELECT DISTINCT `ACCOUNT_ID` FROM `tab_prex_contact_customer_mapping", DBTABLE_SUFFIX, "`) AND `ID` NOT IN ( SELECT DISTINCT `ACCOUNT_ID` FROM `",PS_DBNAME, "product_company_price` ))"));
ELSEIF SUBSTRING(DBTABLE_SUFFIX, 2, 2) = 'targetnz' THEN
	CALL `SP_Exec_Qry`(CONCAT("CREATE TEMPORARY TABLE `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "` ENGINE=MEMORY AS (SELECT
		`ID` AS `ACCOUNT_ID`,
		`NAME` AS `ACCOUNT`,
		`tab_prex_SELLING_PRICE_SCHEME__C` FROM
		`tab_prex_sf_account` WHERE `tab_prex_ACTIVE__C` = 1 AND UPPER(`tab_prex_DATABASE__C`) = UPPER('Flamestop7_NZ') AND `ID` IN (SELECT DISTINCT `ACCOUNT_ID` FROM `tab_prex_contact_customer_mapping", DBTABLE_SUFFIX, "`) AND `ID` NOT IN (SELECT DISTINCT `ACCOUNT_ID` FROM `",PS_DBNAME, "product_company_price`))"));
ELSE
	CALL `SP_Exec_Qry`(CONCAT("CREATE TEMPORARY TABLE `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "` ENGINE=MEMORY AS (SELECT
		`ID` AS `ACCOUNT_ID`,
		`NAME` AS `ACCOUNT`,
		`tab_prex_SELLING_PRICE_SCHEME__C` FROM
		`tab_prex_sf_account` WHERE `tab_prex_ACTIVE__C` = 1 AND UPPER(`tab_prex_DATABASE__C`) NOT IN (UPPER('Flamestop7'), UPPER('Flamestop7_NZ')) AND `ID` IN (SELECT DISTINCT `ACCOUNT_ID` FROM `tab_prex_contact_customer_mapping", DBTABLE_SUFFIX, "`) AND `ID` NOT IN (SELECT DISTINCT `ACCOUNT_ID` FROM `",PS_DBNAME, "product_company_price`))"));
END IF;

SELECT 
    CONCAT('New created Account/Company Information Prepared: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');		

CALL `SP_Exec_Qry`(CONCAT("SELECT COUNT(*) INTO @ACCOUNT_COUNT FROM `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX,"`;"));

IF @ACCOUNT_COUNT > 0 THEN

	/* Prepare the Debtor Specific Rule Table */
	CALL `SP_Exec_Qry`(CONCAT("DROP TABLE IF EXISTS `tab_prex_debtor_specific_price", DBTABLE_SUFFIX, "`"));
	CALL `SP_Exec_Qry`(CONCAT("CREATE TABLE `tab_prex_debtor_specific_price", DBTABLE_SUFFIX, "` AS ( SELECT c.`tab_prex_ACCOUNT__C`, c.`tab_prex_AMOUNT__C`, c.`tab_prex_PRODUCT__C`, c.`tab_prex_QUANTITY_BREAK__C`, c.`tab_prex_MODE__C` FROM `tab_prex_sf_debtor_specific_price` AS c WHERE c.`NAME` IN ( SELECT MAX(b.`NAME`) AS `Rules_Selected` FROM `tab_prex_sf_debtor_specific_price` AS b INNER JOIN ( SELECT `tab_prex_ACCOUNT__C`, `tab_prex_PRODUCT__C`, `tab_prex_QUANTITY_BREAK__C`, MAX(STR_TO_DATE(`tab_prex_START_DATE__C`, '%Y-%m-%d')) AS `Most_Current_Date` FROM `tab_prex_sf_debtor_specific_price` WHERE STR_TO_DATE(`tab_prex_START_DATE__C`, '%Y-%m-%d') <= CURDATE() AND STR_TO_DATE(`tab_prex_END_DATE__C`, '%Y-%m-%d') >= CURDATE() GROUP BY `tab_prex_ACCOUNT__C`, `tab_prex_PRODUCT__C`, `tab_prex_QUANTITY_BREAK__C`) AS a ON b.`tab_prex_ACCOUNT__C` = a.`tab_prex_ACCOUNT__C` AND b.`tab_prex_ACCOUNT__C` IN (SELECT DISTINCT `ACCOUNT_ID` FROM `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "`)       AND b.`tab_prex_PRODUCT__C` = a.`tab_prex_PRODUCT__C` AND b.`tab_prex_QUANTITY_BREAK__C` = a.`tab_prex_QUANTITY_BREAK__C` AND STR_TO_DATE(b.`tab_prex_START_DATE__C`, '%Y-%m-%d') = a.`Most_Current_Date` GROUP BY b.`tab_prex_ACCOUNT__C`, b.`tab_prex_PRODUCT__C`, b.`tab_prex_QUANTITY_BREAK__C`));"));
	CALL `SP_Exec_Qry`(CONCAT("CREATE INDEX `index_fs_debtor_specific_price` ON `tab_prex_debtor_specific_price", DBTABLE_SUFFIX, "` (`tab_prex_ACCOUNT__C`, `tab_prex_PRODUCT__C`);"));

	SELECT 
		CONCAT('Debtor Specific Rules Information Prepared: ',
				DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
				' !');				
				
	/* Clean the final result table */
	SET @counter = 1;
	SET @current_batch_rec_count = 1;

	REPEAT 
	/* Partial Batch Processing based on the segment on Client Table */
	CALL `SP_Exec_Qry`(CONCAT("DROP TEMPORARY TABLE IF EXISTS `tab_prex_product_company", DBTABLE_SUFFIX, "`"));
	/* Clean the temp table: the mix of product with client (contact with active account) */
	CALL `SP_Exec_Qry`(CONCAT("CREATE TEMPORARY TABLE `tab_prex_product_company", DBTABLE_SUFFIX, "` ENGINE=MEMORY AS (SELECT a.*, b.*, CAST(a.`tab_prex_RRP_PRICE__C` AS DECIMAL(8,2)) AS `tab_prex_PRICE_CALC`, CAST(a.`tab_prex_RRP_PRICE__C` AS DECIMAL(8,2)) AS `tab_prex_PRICE_CALC_DEBTOR` FROM `tab_prex_product", DBTABLE_SUFFIX, "` AS a JOIN (SELECT * FROM `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "` LIMIT ", start_point, ", ", batch_size, " ) AS b);"));

	CALL `SP_Exec_Qry`(CONCAT("SELECT COUNT(*) INTO @current_batch_rec_count FROM `tab_prex_product_company", DBTABLE_SUFFIX, "`"));

	CALL `SP_Exec_Qry`(CONCAT("UPDATE `tab_prex_product_company", DBTABLE_SUFFIX, "` 
	SET `tab_prex_PRICE_CALC` = CASE UPPER(`tab_prex_SELLING_PRICE_SCHEME__C`) WHEN UPPER('T1 Price') THEN `FINAL_TIER_1_PRICE` WHEN UPPER('T2 Price') THEN `FINAL_TIER_2_PRICE` WHEN UPPER('T3 Price') THEN `FINAL_TIER_3_PRICE` WHEN UPPER('T4 Price') THEN `FINAL_TIER_4_PRICE` WHEN UPPER('T5 Price') THEN `FINAL_TIER_5_PRICE` WHEN UPPER('T6 Price') THEN `FINAL_TIER_6_PRICE` WHEN UPPER('T7 Price') THEN `FINAL_TIER_7_PRICE` WHEN UPPER('T8 Price') THEN `FINAL_TIER_8_PRICE` WHEN UPPER('T9 Price') THEN `FINAL_TIER_9_PRICE` WHEN UPPER('T10 Price') THEN `FINAL_TIER_10_PRICE` ELSE `FINAL_TIER_1_PRICE` END;"));

	CALL `SP_Exec_Qry`(CONCAT("UPDATE `tab_prex_product_company", DBTABLE_SUFFIX, "` 
	SET 
		`tab_prex_PRICE_CALC_DEBTOR` = `tab_prex_PRICE_CALC`
	WHERE
		`tab_prex_PRICE_CALC_DEBTOR` != `tab_prex_PRICE_CALC`;"));


	/* APPLY DEBTOR SPECIFIC PRICES */
	CALL `SP_Exec_Qry`(CONCAT("UPDATE `tab_prex_product_company", DBTABLE_SUFFIX, "` AS `tab_prex_product_company`
			INNER JOIN `tab_prex_debtor_specific_price", DBTABLE_SUFFIX, "` AS `partial_rules` ON `partial_rules`.`tab_prex_ACCOUNT__C` = `tab_prex_product_company`.`ACCOUNT_ID`
			AND `partial_rules`.`tab_prex_PRODUCT__C` = `tab_prex_product_company`.`ID` AND `partial_rules`.`tab_prex_Quantity_Break__C` = 0 AND `partial_rules`.`tab_prex_AMOUNT__C` != 0 AND `tab_prex_product_company`.`tab_prex_SELLING_PRICE_SCHEME__C` NOT IN ('T10 Price')
	SET 
		`tab_prex_product_company`.`tab_prex_PRICE_CALC_DEBTOR` = CASE UPPER(`partial_rules`.`tab_prex_MODE__C`) WHEN UPPER('Percentage') THEN `tab_prex_product_company`.`tab_prex_PRICE_CALC_DEBTOR` * (100 + `partial_rules`.`tab_prex_AMOUNT__C`) / 100 WHEN UPPER('NONE') THEN `partial_rules`.`tab_prex_AMOUNT__C` ELSE `partial_rules`.`tab_prex_AMOUNT__C` END ;"));
		
	/* == ! Doing Nothing about those FS_MODE__C = 'Actual' ! == */


	/* == Set price to ZERO while they are negative == */ 
	CALL `SP_Exec_Qry`(CONCAT("UPDATE `tab_prex_product_company", DBTABLE_SUFFIX, "` 
	SET 
		`tab_prex_PRICE_CALC_DEBTOR` = 0
	WHERE
		`tab_prex_PRICE_CALC_DEBTOR` < 0;"));
		
	/* Override the Price based on the Price_Overwrite Table */
	CALL `SP_Exec_Qry`(CONCAT("UPDATE `tab_prex_product_company", DBTABLE_SUFFIX, "` AS `tab_prex_product_company` INNER JOIN `tab_prex_product_price_overwrite", DBTABLE_SUFFIX, "` AS `tab_prex_product_price_overwrite` On `tab_prex_product_company`.`NAME` = `tab_prex_product_price_overwrite`.`reference` AND (`tab_prex_product_price_overwrite`.`date_start` IS NOT NULL AND DATE(`tab_prex_product_price_overwrite`.`date_start`) <= CURDATE() AND ((`tab_prex_product_price_overwrite`.`date_end` IS NULL) OR (DATE(`tab_prex_product_price_overwrite`.`date_end`) >= CURDATE()))) SET `tab_prex_product_company`.`tab_prex_PRICE_CALC_DEBTOR` = `tab_prex_product_price_overwrite`.`price`; "));	
	
	/* Append to the final tables */
	IF SUBSTRING(DBTABLE_SUFFIX, 4, 1) = '-' THEN
		CALL `SP_Exec_Qry`(CONCAT("INSERT `tab_prex_product_company_price", DBTABLE_SUFFIX, "` SELECT `ACCOUNT_ID`, `ACCOUNT`, `NAME` AS `reference`, CASE UPPER(`tab_prex_STATUS__C`) WHEN UPPER('SLOW') THEN `tab_prex_RRP_PRICE__C` WHEN UPPER('DISCONTINUED') THEN `tab_prex_RRP_PRICE__C` ELSE `tab_prex_PRICE_CALC_DEBTOR` END AS `price`, `tab_prex_PRICE_CALC_DEBTOR` as `rrp_price`, CURRENT_TIMESTAMP AS `date_upd` FROM `tab_prex_product_company", DBTABLE_SUFFIX, "`"));
		CALL `SP_Exec_Qry`(CONCAT("INSERT `", PS_DBNAME, "product_company_price` SELECT `ACCOUNT_ID`, `ACCOUNT`, `NAME` AS `reference`, CASE UPPER(`tab_prex_STATUS__C`) WHEN UPPER('SLOW') THEN `tab_prex_RRP_PRICE__C` WHEN UPPER('DISCONTINUED') THEN `tab_prex_RRP_PRICE__C` ELSE `tab_prex_PRICE_CALC_DEBTOR` END AS `price`, `tab_prex_PRICE_CALC_DEBTOR` as `rrp_price`, CURRENT_TIMESTAMP AS `date_upd` FROM `tab_prex_product_company", DBTABLE_SUFFIX, "`"));
		
	ELSE
		CALL `SP_Exec_Qry`(CONCAT("INSERT `tab_prex_product_company_price", DBTABLE_SUFFIX, "` SELECT `ACCOUNT_ID`, `ACCOUNT`, `NAME` AS `reference`, `tab_prex_PRICE_CALC_DEBTOR` AS `price`, `tab_prex_RRP_PRICE__C` as `rrp_price`, CURRENT_TIMESTAMP AS `date_upd` FROM `tab_prex_product_company", DBTABLE_SUFFIX, "`"));
		CALL `SP_Exec_Qry`(CONCAT("INSERT `", PS_DBNAME, "product_company_price` SELECT `ACCOUNT_ID`, `ACCOUNT`, `NAME` AS `reference`, `tab_prex_PRICE_CALC_DEBTOR` AS `price`, `tab_prex_RRP_PRICE__C` as `rrp_price`, CURRENT_TIMESTAMP AS `date_upd` FROM `tab_prex_product_company", DBTABLE_SUFFIX, "`"));
	END IF;

	SELECT 
		CONCAT('Batch #',
				@counter,
				' finished at: ',
				DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
				' .');

		SET @counter = @counter + 1;
		SET start_point = (@counter -1 )* batch_size;
		
		CALL `SP_Exec_Qry`(CONCAT("DROP TEMPORARY TABLE IF EXISTS `tab_prex_product_company", DBTABLE_SUFFIX, "`"));
	UNTIL ((@counter >= batch) OR (@current_batch_rec_count = 0)) END REPEAT;

	CALL `SP_Exec_Qry`(CONCAT("DROP TEMPORARY TABLE IF EXISTS `tab_prex_debtor_specific_price", DBTABLE_SUFFIX, "`"));
END IF;
			
/* Clean the Temp Tables */
CALL `SP_Exec_Qry`(CONCAT("DROP TEMPORARY TABLE IF EXISTS `tab_prex_INCREMENTAL_company", DBTABLE_SUFFIX, "`"));

SELECT 
    CONCAT('Now it ends: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');
            
SELECT CONCAT('The Incrementally Update Price Matrix has been re-composed ! ', 'Target: ', SERVER_TARGET);

SET sql_mode = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';

END