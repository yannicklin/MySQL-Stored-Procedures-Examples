CREATE DEFINER=`root`@`root` PROCEDURE `SP_Create_Product_Company_Price_Matrix`(OUT RUNNING_RESULT VARCHAR(50))
BEGIN
 DECLARE PS_DBNAME VARCHAR(50);
 DECLARE batch INT;
 DECLARE batch_size INT;
 DECLARE start_point INT;
  
 SET PS_DBNAME = 'database';
 SET batch = 200;
 SET batch_size = 50;
 SET start_point = 0;
 
 
SELECT 'This procedure is to create the matrix of product and account/company, with the price based on the Price Tier and Debtor Price Rule.';
SELECT 'All data are come from SalesForce without modifications.';
SELECT 
    CONCAT('Now it starts: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');

/* RECREATE PRODUCT TABLE */
DROP TABLE IF EXISTS `tab_prex_product`;

CALL `SP_Exec_Qry`(CONCAT("CREATE TABLE `tab_prex_product` AS (SELECT `tab_prex_sf_product`.*,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_1_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_2_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_3_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_4_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_5_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_6_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_7_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_8_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_9_PRICE`,
    CAST(0.0 AS DECIMAL(8,2)) AS `FINAL_TIER_10_PRICE` FROM
    `tab_prex_sf_product`
WHERE
    `tab_prex_sf_product`.`NAME` IN (SELECT DISTINCT
            `reference`
        FROM
            (SELECT DISTINCT reference FROM `", PS_DBNAME, "`.`kuom_product`
        WHERE
            `active` = 1
			UNION
			SELECT DISTINCT reference FROM `", PS_DBNAME, "`.`kuom_product_attribute` ) AS `product_reference_list` ) AND `ISACTIVE` = 1 AND UPPER(`tab_prex_STATUS__C`) = UPPER('ACTIVE') ORDER BY NAME ASC )"));
			

/* Update fs_product TIER_PRICE based on the decision of which row (FS_CURRENT_DATE and FS_FORWARDER_DATE) is closer and not in future date */
UPDATE `tab_prex_product` 
SET 
    `FINAL_TIER_1_PRICE` = `tab_prex_TIER_1_PRICE__C`,
    `FINAL_TIER_2_PRICE` = `tab_prex_TIER_2_PRICE__C`,
    `FINAL_TIER_3_PRICE` = `tab_prex_TIER_3_PRICE__C`,
    `FINAL_TIER_4_PRICE` = `tab_prex_TIER_4_PRICE__C`,
    `FINAL_TIER_5_PRICE` = `tab_prex_TIER_5_PRICE__C`,
    `FINAL_TIER_6_PRICE` = `tab_prex_TIER_6_PRICE__C`,
    `FINAL_TIER_7_PRICE` = `tab_prex_TIER_7_PRICE__C`,
    `FINAL_TIER_8_PRICE` = `tab_prex_TIER_8_PRICE__C`,
    `FINAL_TIER_9_PRICE` = `tab_prex_TIER_9_PRICE__C`,
    `FINAL_TIER_10_PRICE` = `tab_prex_TIER_10_PRICE__C`
WHERE
    STR_TO_DATE(`tab_prex_CURRENT_DATE__C`, '%Y-%m-%d') <= CURDATE()
        AND ((STR_TO_DATE(`tab_prex_CURRENT_DATE__C`, '%Y-%m-%d') >= STR_TO_DATE(`tab_prex_FORWARD_DATE__C`, '%Y-%m-%d'))
        OR (STR_TO_DATE(`tab_prex_CURRENT_DATE__C`, '%Y-%m-%d') <= STR_TO_DATE(`tab_prex_FORWARD_DATE__C`, '%Y-%m-%d')
        AND STR_TO_DATE(`tab_prex_FORWARD_DATE__C`, '%Y-%m-%d') >= CURDATE()));

UPDATE `tab_prex_product` 
SET 
    `FINAL_TIER_1_PRICE` = `tab_prex_FORWARDED_PRICE_1__C`,
    `FINAL_TIER_2_PRICE` = `tab_prex_FORWARDED_PRICE_2__C`,
    `FINAL_TIER_3_PRICE` = `tab_prex_FORWARDED_PRICE_3__C`,
    `FINAL_TIER_4_PRICE` = `tab_prex_FORWARDED_PRICE_4__C`,
    `FINAL_TIER_5_PRICE` = `tab_prex_FORWARDED_PRICE_5__C`,
    `FINAL_TIER_6_PRICE` = `tab_prex_FORWARDED_PRICE_6__C`,
    `FINAL_TIER_7_PRICE` = `tab_prex_FORWARDED_PRICE_7__C`,
    `FINAL_TIER_8_PRICE` = `tab_prex_FORWARDED_PRICE_8__C`,
    `FINAL_TIER_9_PRICE` = `tab_prex_FORWARDED_PRICE_9__C`,
    `FINAL_TIER_10_PRICE` = `tab_prex_FORWARDED_PRICE_10__C`
WHERE
    STR_TO_DATE(`tab_prex_FORWARD_DATE__C`, '%Y-%m-%d') <= CURDATE()
        AND ((STR_TO_DATE(`tab_prex_FORWARD_DATE__C`, '%Y-%m-%d') >= STR_TO_DATE(`tab_prex_CURRENT_DATE__C`, '%Y-%m-%d'))
        OR (STR_TO_DATE(`tab_prex_FORWARD_DATE__C`, '%Y-%m-%d') <= STR_TO_DATE(`tab_prex_CURRENT_DATE__C`, '%Y-%m-%d')
        AND STR_TO_DATE(`tab_prex_CURRENT_DATE__C`, '%Y-%m-%d') >= CURDATE()));

SELECT 
    CONCAT('Product Information Prepared: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');		
		
		
/* RECREATE Company/ACCOUNT TABLE */
DROP TEMPORARY TABLE IF EXISTS `tab_prex_company`;

CREATE TEMPORARY TABLE `tab_prex_company` ENGINE=MEMORY AS (SELECT
    `ID` AS `ACCOUNT_ID`,
    `NAME` AS `ACCOUNT`,
    `tab_prex_SELLING_PRICE_SCHEME__C` FROM
    `tab_prex_sf_account` WHERE `ID` IN (SELECT DISTINCT `ACCOUNT_ID` FROM `tab_prex_sf_contact_customer_mapping`) AND `tab_prex_ACTIVE__C` = 1);
	

SELECT 
    CONCAT('Account/Company Information Prepared: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');				


/* Prepare the Debtor Specific Rule Table */
CALL `SP_Exec_Qry`(CONCAT("DROP TABLE IF EXISTS `tab_prex_debtor_specific_price`"));
CALL `SP_Exec_Qry`(CONCAT("CREATE TABLE `tab_prex_debtor_specific_price` AS ( SELECT c.`tab_prex_ACCOUNT__C`, c.`tab_prex_AMOUNT__C`, c.`tab_prex_PRODUCT__C`, c.`tab_prex_QUANTITY_BREAK__C`, c.`tab_prex_MODE__C` FROM `tab_prex_sf_debtor_specific_price` AS c WHERE c.`NAME` IN ( SELECT MAX(b.`NAME`) AS `Rules_Selected` FROM `tab_prex_sf_debtor_specific_price` AS b INNER JOIN ( SELECT `tab_prex_ACCOUNT__C`, `tab_prex_PRODUCT__C`, `tab_prex_QUANTITY_BREAK__C`, MAX(STR_TO_DATE(`tab_prex_START_DATE__C`, '%Y-%m-%d')) AS `Most_Current_Date` FROM `tab_prex_sf_debtor_specific_price` WHERE STR_TO_DATE(`tab_prex_START_DATE__C`, '%Y-%m-%d') <= CURDATE() AND STR_TO_DATE(`tab_prex_END_DATE__C`, '%Y-%m-%d') >= CURDATE() GROUP BY `tab_prex_ACCOUNT__C`, `tab_prex_PRODUCT__C`, `tab_prex_QUANTITY_BREAK__C`) AS a ON b.`tab_prex_ACCOUNT__C` = a.`tab_prex_ACCOUNT__C` AND b.`tab_prex_PRODUCT__C` = a.`tab_prex_PRODUCT__C` AND b.`tab_prex_QUANTITY_BREAK__C` = a.`tab_prex_QUANTITY_BREAK__C` AND STR_TO_DATE(b.`tab_prex_START_DATE__C`, '%Y-%m-%d') = a.`Most_Current_Date` GROUP BY b.`tab_prex_ACCOUNT__C`, b.`tab_prex_PRODUCT__C`, b.`tab_prex_QUANTITY_BREAK__C`));"));
CALL `SP_Exec_Qry`(CONCAT("CREATE INDEX `index_fs_debtor_specific_price` ON `tab_prex_debtor_specific_price` (`tab_prex_ACCOUNT__C`, `tab_prex_PRODUCT__C`);"));

SELECT 
    CONCAT('Debtor Specific Rules Information Prepared: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');			
			

	
/* Clean the final result table */
DROP INDEX `index_fs_product_company_price` ON `tab_prex_product_company_price`;
TRUNCATE TABLE `tab_prex_product_company_price`;

SET @counter = 1;
SET @current_batch_rec_count = 1;

REPEAT 
/* Partial Batch Processing based on the segment on Client Table */

DROP TEMPORARY TABLE IF EXISTS `tab_prex_product_company`;
/* Clean the temp table: the mix of product with client (contact with active account) */
CREATE TEMPORARY TABLE `tab_prex_product_company` ENGINE=MEMORY AS (SELECT a.*, b.*, CAST(a.`tab_prex_RRP_PRICE__C` AS DECIMAL(8,2)) AS `tab_prex_PRICE_CALC`, CAST(a.`tab_prex_RRP_PRICE__C` AS DECIMAL(8,2)) AS `tab_prex_PRICE_CALC_DEBTOR` FROM `tab_prex_product` AS a JOIN (SELECT * FROM `tab_prex_company` LIMIT start_point, batch_size ) AS b);

SELECT COUNT(*) INTO @current_batch_rec_count FROM `tab_prex_product_company`;

UPDATE `tab_prex_product_company` 
SET `tab_prex_PRICE_CALC` = CASE UPPER(`tab_prex_SELLING_PRICE_SCHEME__C`) WHEN UPPER('T1 Price') THEN `FINAL_TIER_1_PRICE` WHEN UPPER('T2 Price') THEN `FINAL_TIER_2_PRICE` WHEN UPPER('T3 Price') THEN `FINAL_TIER_3_PRICE` WHEN UPPER('T4 Price') THEN `FINAL_TIER_4_PRICE` WHEN UPPER('T5 Price') THEN `FINAL_TIER_5_PRICE` WHEN UPPER('T6 Price') THEN `FINAL_TIER_6_PRICE` WHEN UPPER('T7 Price') THEN `FINAL_TIER_7_PRICE` WHEN UPPER('T8 Price') THEN `FINAL_TIER_8_PRICE` WHEN UPPER('T9 Price') THEN `FINAL_TIER_9_PRICE` WHEN UPPER('T10 Price') THEN `FINAL_TIER_10_PRICE` ELSE `FINAL_TIER_1_PRICE` END;
	
UPDATE `tab_prex_product_company` 
SET 
    `tab_prex_PRICE_CALC_DEBTOR` = `tab_prex_PRICE_CALC`
WHERE
    `tab_prex_PRICE_CALC_DEBTOR` != `tab_prex_PRICE_CALC`;
	

/* APPLY DEBTOR SPECIFIC PRICES */
UPDATE `tab_prex_product_company` AS `tab_prex_product_company`
        INNER JOIN `tab_prex_debtor_specific_price` AS `partial_rules` ON `partial_rules`.`tab_prex_ACCOUNT__C` = `tab_prex_product_company`.`ACCOUNT_ID`
        AND `partial_rules`.`tab_prex_PRODUCT__C` = `tab_prex_product_company`.`ID` AND `partial_rules`.`tab_prex_Quantity_Break__C` = 0 AND `partial_rules`.`tab_prex_AMOUNT__C` != 0 AND `tab_prex_product_company`.`tab_prex_SELLING_PRICE_SCHEME__C` NOT IN ('T10 Price')
SET 
    `tab_prex_product_company`.`tab_prex_PRICE_CALC_DEBTOR` = CASE UPPER(`partial_rules`.`tab_prex_MODE__C`) WHEN UPPER('Percentage') THEN `tab_prex_product_company`.`tab_prex_PRICE_CALC_DEBTOR` * (100 - `partial_rules`.`tab_prex_AMOUNT__C`) / 100 WHEN UPPER('NONE') THEN `partial_rules`.`tab_prex_AMOUNT__C` ELSE `partial_rules`.`tab_prex_AMOUNT__C` END ;

	
/* == ! Doing Nothing about those FS_MODE__C = 'Actual' ! == */


/* == Set price to ZERO while they are negative == */ 	
UPDATE `tab_prex_product_company` 
SET 
    `tab_prex_PRICE_CALC_DEBTOR` = 0
WHERE
    `tab_prex_PRICE_CALC_DEBTOR` < 0;
	

/* Append to the final table */
CALL `SP_Exec_Qry`(CONCAT("INSERT `tab_prex_product_company_price` SELECT `ACCOUNT_ID`, `ACCOUNT`, `NAME` AS `reference`, `tab_prex_PRICE_CALC_DEBTOR` AS `price`, CURRENT_TIMESTAMP AS `date_upd` FROM `tab_prex_product_company`"));

SELECT 
    CONCAT('Batch #',
            @counter,
            ' finished at: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' .');

	SET @counter = @counter + 1;
    SET start_point = (@counter -1 )* batch_size;
	
	DROP TEMPORARY TABLE IF EXISTS `tab_prex_product_company`;

UNTIL ((@counter >= batch) OR (@current_batch_rec_count = 0)) END REPEAT;
	
/* Override the Price based on the Price_Overwrite Table */
UPDATE `tab_prex_product_company_price` INNER JOIN `tab_prex_product_price_overwrite` On `tab_prex_product_company_price`.`reference` = `tab_prex_product_price_overwrite`.`reference` AND DATE(`tab_prex_product_price_overwrite`.`date_start`) <= CURDATE() AND (DATE(`tab_prex_product_price_overwrite`.`date_end`) >= CURDATE() OR `tab_prex_product_price_overwrite`.`date_end` = '' OR `tab_prex_product_price_overwrite`.`date_end` IS NULL) SET `tab_prex_product_company_price`.`price` = `tab_prex_product_price_overwrite`.`price`; 
	
	
/* Recreate Index of the final table */
CREATE INDEX `index_fs_product_company_price` ON `tab_prex_product_company_price` (`reference`, `ACCOUNT_ID`);
DROP TEMPORARY TABLE IF EXISTS `tab_prex_company`;


/* Clone Result to PrestaShop Website Database */
CALL `SP_Exec_Qry`(CONCAT("DROP TABLE IF EXISTS `", PS_DBNAME, "`.`kuom_product_company_price`"));
CALL `SP_Exec_Qry`(CONCAT("CREATE TABLE `", PS_DBNAME, "`.`kuom_product_company_price` LIKE `tab_prex_product_company_price`"));
CALL `SP_Exec_Qry`(CONCAT("ALTER TABLE `", PS_DBNAME, "`.`kuom_product_company_price` DISABLE KEYS"));
SET autocommit=0;
CALL `SP_Exec_Qry`(CONCAT("INSERT `", PS_DBNAME, "`.`kuom_product_company_price` SELECT * FROM `tab_prex_product_company_price`"));
CALL `SP_Exec_Qry`(CONCAT("ALTER TABLE `", PS_DBNAME, "`.`kuom_product_company_price` ENABLE KEYS"));
COMMIT;

SELECT 
    CONCAT('Now it ends: ',
            DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
            ' !');
            
SELECT 'The Price Matrix has been re-composed !' INTO RUNNING_RESULT;
END